#!/bin/bash 
# build the buildpack files and create an image
#
# Use: build-image buildpack  
#
# The image will be built and committed to docker with
# at repository $BUILDPACK with tag latest
#
# 1. Build the context for docker build in $TMP/$BUILDPACK   
#
# ./Dockerfile
# ./bin
# ./bin/build        
# ./bin/compile
# ./bin/detect
# ./bin/release
# ./minicf
# + any files from the buildpack itself
#
# 3. run docker build with $TMP/$BUILDPACK as the context
#    to build and commit the image $BUILDPACK
# 
#    This will run detect/compile/release from $BUILDPACK/bin
#    If there is a $BUILDPACK/Dockerfile it will be used to
#    build the image. Otherwise config/Dockerfile is used. Using
#    this you can specify a default base image specific to the buildpack,
#    or rely on the basic image prepared by minicf
#
# 4. clean up
#
# If all steps run successfully

# set directories
SCRIPT=`realpath $0`
SOURCE=`dirname $SCRIPT`
BUILDPACK_DIR=/opt/minicf
BUILDPACK=$1
TMP=`mktemp -d /tmp/minicf.XXXXXXXX`
DIST=$TMP/$BUILDPACK

# create staging directory
cd $TMP
mkdir -p $BUILDPACK/bin
mkdir -p $BUILDPACK/app
mkdir -p $BUILDPACK/minicf
mkdir -p $DIST

# get relevant files from minicf itself
cd $SOURCE
cp build $TMP/$BUILDPACK/bin/.
cp start $TMP/$BUILDPACK/bin/.
# FIXME: we should use a source tar or something 
cp -r ../minicf $TMP/$BUILDPACK/minicf/.
cp -r ../setup.py $TMP/$BUILDPACK/minicf/.
cp ../requirements.txt $TMP/$BUILDPACK/minicf/.
cp ../README $TMP/$BUILDPACK/minicf/.

# get buildpack files
cd $BUILDPACK_DIR/$BUILDPACK
cp -r . $TMP/$BUILDPACK/.

# use Dockerfile from stack or from minicf otherwise
cd $TMP/$BUILDPACK
if [ -f ./Dockerfile ]; 
then
  :
else
  cp $SOURCE/../config/Dockerfile .
fi

# make sure scripts can be executed
chmod +x bin/*

# cleanup
if [ "$2" != "--debug" ]; then
	# build the image
	cd $TMP
	docker build -t $BUILDPACK $BUILDPACK
	rm -rf $TMP
else
   echo Buildpack files are in $TMP
fi
