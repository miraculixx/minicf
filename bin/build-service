#!/bin/bash 
# build the app image
#
# Use: build-service service image  
#
# The image will be built and committed to docker 
# at repository service with tag latest. 
# 
# 1. Create the docker build context for the service   
#
# ./Dockerfile
# ./bin
# ./bin/build
# ./app
# ./log        
#
# 2. Change the FROM statement in ./Dockerfile to the image given 
#
# 3. Build the image and tag it as service
#
# 4. clean up
#
# If all steps run successfully

# set directories
SCRIPT=`realpath $0`
SOURCE=`dirname $SCRIPT`
APP=$1
APP_DIR=/opt/git
TMP=`mktemp -d /tmp/minicf.XXXXXXXX`
DIST=$TMP/$APP
IMAGE=$2

# create staging directory
cd $TMP
mkdir -p $APP/bin
mkdir -p $APP/app
mkdir -p $APP/log
mkdir -p $DIST

# get relevant files from minicf itself
cd $SOURCE
cp start $TMP/$APP/bin/.

# use the default service Dockerfile, and change the FROM image
cd $TMP/$APP
cp $SOURCE/../config/service_Dockerfile ./Dockerfile
sed -i "s@FROM.*@FROM $IMAGE@g" ./Dockerfile

# make sure scripts can be executed
chmod +x bin/*
chmod +x app/*.sh

# cleanup
if [ "$3" != "--debug" ]; then
	# build the image
	cd $TMP
	docker build -t $APP $APP  
	rm -rf $TMP
else
   echo Service files are in $TMP
fi
